name: Build and Package

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    name: Check Version and Create Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag_exists: ${{ steps.check-tag.outputs.tag_exists }}
      should_release: ${{ steps.check-release.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get version from Cargo.toml
        id: get-version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

      - name: Check if tag exists
        id: check-tag
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION doesn't exist, will create it"
          fi

      - name: Check if release exists
        id: check-release
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION)
          echo "should_release=true" >> $GITHUB_OUTPUT
          if [[ "$RELEASE_EXISTS" == "200" ]]; then
            echo "Release for v$VERSION already exists, will delete it and recreate"
            # Get release ID
            RELEASE_ID=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION | jq -r .id)
            if [[ "$RELEASE_ID" != "null" ]]; then
              # Delete the existing release
              curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
              echo "Deleted existing release with ID: $RELEASE_ID"
            fi
          else
            echo "No release found for v$VERSION, continuing with build and release"
          fi

      - name: Create and push tag
        if: steps.check-tag.outputs.tag_exists == 'false'
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "Created and pushed tag v$VERSION"

  build:
    name: Build ${{ matrix.os }}
    needs: check-version
    if: ${{ needs.check-version.outputs.should_release == 'true' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: mew-windows-x86
            asset_name: mew-windows-x86.zip
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: mew-windows-x86_64
            asset_name: mew-windows-x86_64.zip

          # Linux builds
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            artifact_name: mew-linux-x86
            asset_name: mew-linux-x86.zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: mew-linux-x86_64
            asset_name: mew-linux-x86_64.zip
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: mew-linux-arm64
            asset_name: mew-linux-arm64.zip

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: mew-macos-x86_64
            asset_name: mew-macos-x86_64.zip
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: mew-macos-arm64
            asset_name: mew-macos-arm64.zip

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib pkg-config libssl-dev
          if [[ "${{ matrix.target }}" == "i686-unknown-linux-gnu" ]]; then
            # For cross-compiling OpenSSL for 32-bit
            sudo dpkg --add-architecture i386
            sudo apt-get update
            sudo apt-get install -y libssl-dev:i386
            echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib/i386-linux-gnu" >> $GITHUB_ENV
            echo "CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=gcc" >> $GITHUB_ENV
            echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          fi
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            # For cross-compiling with OpenSSL
            export OPENSSL_DIR=/usr
            export OPENSSL_INCLUDE_DIR=/usr/include
            export OPENSSL_LIB_DIR=/usr/lib
            echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
            echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV
            echo "OPENSSL_LIB_DIR=/usr/lib" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - name: Enable colored output
        run: echo "CARGO_TERM_COLOR=always" >> $GITHUB_ENV
        if: runner.os != 'Windows'

      - name: Enable colored output (Windows)
        run: echo "CARGO_TERM_COLOR=always" | Out-File -FilePath $Env:GITHUB_ENV -Append
        if: runner.os == 'Windows'

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare package directory
        shell: bash
        run: |
          mkdir -p package
          # Copy binary with correct extension and location
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/${{ matrix.target }}/release/mew.exe package/
          else
            cp target/${{ matrix.target }}/release/mew package/
          fi

          # Copy documentation and examples
          cp README.md LICENSE package/
          mkdir -p package/examples
          cp examples/*.mew package/examples/

      - name: Create ZIP archive
        shell: bash
        run: |
          cd package
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a -tzip ../${{ matrix.asset_name }} *
          else
            zip -r ../${{ matrix.asset_name }} *
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: [check-version, build]
    if: ${{ needs.check-version.outputs.should_release == 'true' || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mew-windows-x86/*.zip
            mew-windows-x86_64/*.zip
            mew-linux-x86/*.zip
            mew-linux-x86_64/*.zip
            mew-linux-arm64/*.zip
            mew-macos-x86_64/*.zip
            mew-macos-arm64/*.zip
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.check-version.outputs.version) }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
