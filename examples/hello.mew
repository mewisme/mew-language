// Hello world in Mew language
purr("Hello, Mew world!");

// Variable declarations
catst PI = 3.14159;  // Constant (can't be reassigned)
catlt radius = 5;    // Let variable
catv message = "The area of the circle is: ";  // Var variable

// Function definition
cat calculateArea(r) {
    return PI * r * r;
}

// Function call
catlt area = calculateArea(radius);
purr(message + area);

// Arrays
catlt fruits = ["apple", "banana", "cherry"];
purr("Fruits:");
fur (catlt i = 0; i < 3; i++) {
    purr((i + 1) + ". " + fruits[i]);
}

// Objects
catlt cat = {
    name: "Whiskers",
    age: 3,
    color: "orange"
};
purr("Cat details:");
purr("Name: " + cat.name);
purr("Age: " + cat.age);
purr("Color: " + cat.color);

// If statement
meow? (cat.age > 5) {
    purr("This is an old cat!");
} meowse? (cat.age > 2) {
    purr("This is an adult cat!");
} hiss {
    purr("This is a young cat!");
}

// Switch case
catlt fruit = "banana";
catwalk(fruit) {
    claw "apple":
        purr("It's an apple!");
        clawt;
    claw "banana":
        purr("It's a banana!");
        clawt;
    claw "cherry":
        purr("It's a cherry!");
        clawt;
    default:
        purr("Unknown fruit!");
}

// While loop
catlt counter = 0;
purr("While loop counting:");
mewhile (counter < 3) {
    purr("Counter: " + counter);
    counter++;
}

// For loop with in/of
purr("Fruits using for-in:");
fur (catlt index in fruits) {
    purr("Index: " + index + ", Fruit: " + fruits[index]);
}

// Arrow function
catlt multiply = (a, b) => {
    return a * b;
};
purr("2 x 3 = " + multiply(2, 3));

purr("Mew program completed!"); 